name: "Tasks - Build and Push"

on:
  workflow_call:
    inputs:
      IMAGE:
        description: 'Name (reference) of the image to build.'
        type: string
        required: true
      IMAGE_TAG:
        description: 'Tag of the image to build.'
        type: string
        required: true
      REGISTRY:
        description: 'Registry.'
        type: string
        default: 'ghcr.io'
      DOCKERFILE:
        description: 'Path to the Dockerfile to build.'
        type: string
        default: './Dockerfile'
      CONTEXT:
        description: 'The build context used by Kaniko.'
        type: string
        default: './'
      EXTRA_ARGS:
        description: 'Extra arguments for Kaniko.'
        type: string
        default: ''
      BUILDER_IMAGE:
        description: 'The image on which builds will run.'
        type: string
        default: 'gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5'
      COMPILE:
        description: whether to compile or not the artifact
        type: string
        default: 'false'
      TARGET_FOLDER:
        description: 'The target to build.'
        type: string
        default: 'target/'

jobs:
  build_and_push:
    name: Build and push
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: '11'

      # - name: Build with Maven
      #   run: mvn clean package

      - name: Set image tag
        env:
          IMAGE_TAG: ${{ inputs.IMAGE_TAG }}
        run: |
          if [[ "$IMAGE_TAG" == *"refs/"* ]]; then
            IMAGE_TAG="${IMAGE_TAG##*/}"
            echo "IMAGE_TAG=${IMAGE_TAG}" >> ${GITHUB_ENV}
          else
            echo "IMAGE_TAG=${IMAGE_TAG}" >> ${GITHUB_ENV}
          fi
      - name: Download artifact from build job
        if: ${{inputs.COMPILE == 'true'}}
        uses: actions/download-artifact@v4
        with:
          name: java-app
          path: ${{inputs.TARGET_FOLDER}}
      - name: LS Files
        run: ls -la

      - name: Build Docker Image
        run: |
          docker build -f "${{ inputs.DOCKERFILE }}" -t "${{ inputs.IMAGE }}:${{ env.IMAGE_TAG }}" . --progress=plain --no-cache

      - name: Docker login
        run: docker login ${{ inputs.REGISTRY }} -u ${{ github.actor }} -p ${{ secrets.OWNER_TOKEN }}

      - name: Docker push
        run: docker push  "${{ inputs.IMAGE }}:${{ env.IMAGE_TAG }}"